<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://mshen.me/</link>
    <atom:link href="http://mshen.me/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Machine Learning Foundation (part 1 of 2)</title>
        <description>&lt;p&gt;I recently finished &lt;a href=&quot;https://www.coursera.org/learn/machine-learning&quot;&gt;Machine Learning class on Coursera&lt;/a&gt;. It’s a great entry-level Machine Learning (ML) class. In this blog post and another following post I attempt to explain, in simple terms, some foundamental concepts in machine learning. Rather than drilling into mathematical details of ML techniques, this post starts with high-level way of thinking (e.g. how to decided which algorithm to try?).&lt;/p&gt;

&lt;h2 id=&quot;what-is-machine-learning&quot;&gt;What is Machine Learning?&lt;/h2&gt;

&lt;p&gt;Simply put, machine learning is a technique to &lt;strong&gt;teach computers to learn certain tasks&lt;/strong&gt;, it is about developing algorithms that learn how to perform certain tasks given a large amounts of data. Some interesting tasks include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Detect financial fraud by analyzing credit card transation&lt;/li&gt;
  &lt;li&gt;Self-driven automobile&lt;/li&gt;
  &lt;li&gt;Facial recoginition of images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;learning&lt;/strong&gt; can be divided into two categories: &lt;strong&gt;supervised&lt;/strong&gt; and &lt;strong&gt;unsupervised&lt;/strong&gt; learning. Supervised learning handles &lt;strong&gt;labeled&lt;/strong&gt; data and attempt to &lt;strong&gt;classify&lt;/strong&gt; or &lt;strong&gt;predict&lt;/strong&gt; based on labled data (training set). Unsupervised learnings handles &lt;strong&gt;unlabled&lt;/strong&gt; data and attempt to detect trends and patterns (clustering).&lt;/p&gt;

&lt;h2 id=&quot;machine-learning-approach&quot;&gt;Machine Learning Approach&lt;/h2&gt;

&lt;p&gt;Most machine learning problems share &lt;strong&gt;similar iterative, pipeline approach&lt;/strong&gt; because the large picture of most ML remains similar, which can be roughly summarized as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given we &lt;strong&gt;reliably collect&lt;/strong&gt; a large set of data &lt;br /&gt;
And we &lt;strong&gt;define a task&lt;/strong&gt; ML algorithm is supposed to learn &lt;br /&gt;
First We perform &lt;strong&gt;proprocessing&lt;/strong&gt; of data &lt;br /&gt;
Then we &lt;strong&gt;prototype&lt;/strong&gt; algorithms to accomplish defined task &lt;br /&gt;
And we &lt;strong&gt;evaluate the fitness&lt;/strong&gt; of algorithms &lt;br /&gt;
And we &lt;strong&gt;improve algorithms&lt;/strong&gt; based on the evaluation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;collect-data&quot;&gt;Collect Data&lt;/h3&gt;

&lt;p&gt;When we collect data for a ML problem, we should ask the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What’s the context of the data?&lt;/li&gt;
  &lt;li&gt;What are the bias within the data, are the bias related to the defined task?&lt;/li&gt;
  &lt;li&gt;How clean is the data (missing fields, etc)?&lt;/li&gt;
  &lt;li&gt;Can we get more data?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The technique of &lt;code class=&quot;highlighter-rouge&quot;&gt;Artificual Synthesis&lt;/code&gt; is applied often to generate more data. The idea is that we can “simulate” more data based on real data. One example used is &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;Optical Character Reader&lt;/a&gt;, researchers combine background of one image with the letter of another image to form a new image and include the synthesized image as a data point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ocr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;define-a-task&quot;&gt;Define a task&lt;/h3&gt;

&lt;p&gt;Beware what tasks can we perform based on the &lt;strong&gt;nature of data&lt;/strong&gt;. For example, it might be more difficult to perform prediction related tasks using &lt;strong&gt;unlabeled data&lt;/strong&gt;. To borrow from a great &lt;a href=&quot;http://stackoverflow.com/questions/19170603/what-is-the-difference-between-labeled-and-unlabeled-data&quot;&gt;Stackoverflow answer on labled data vs. unlabeled data&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Typically, &lt;strong&gt;unlabeled data&lt;/strong&gt; consists of samples of natural or human-created artifacts that you can obtain relatively easily from the world. Some examples of unlabeled data might include photos, audio recordings, videos, news articles, tweets, x-rays (if you were working on a medical application), etc. There is no “explanation” for each piece of unlabeled data – it just contains the data, and nothing else. &lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Labeled data&lt;/strong&gt; typically takes a set of unlabeled data and augments each piece of that unlabeled data with some sort of meaningful “tag,” “label,” or “class” that is somehow informative or desirable to know. For example, labels for the above types of unlabeled data might be whether this photo contains a horse or a cow, which words were uttered in this audio recording, what type of action is being performed in this video, what the topic of this news article is, what the overall sentiment of this tweet is, whether the dot in this x-ray is a tumor, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;preprocess-data&quot;&gt;Preprocess data&lt;/h3&gt;

&lt;p&gt;The goals of preprocessing data are twofold: first to get a feel of the dataset before we dive into algorithm development, and second to normalize data to similar scale. To get a feel of the data, &lt;strong&gt;visualizing data&lt;/strong&gt;* helps. The idea of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dimensionality_reduction&quot;&gt;Dimensionality Reduction&lt;/a&gt; is applied when handling dataset with high dimensions, which maps data &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; R^{n} \rightarrow R^{2}, R^{3}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8141079999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.008548em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;One technique of dimensionality reduction is &lt;a href=&quot;https://en.wikipedia.org/wiki/Principal_component_analysis&quot;&gt;Principle Component Analaysis (PCA)&lt;/a&gt;, which is a linear transformation that can be defined as followings:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a dataset &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;X \in R_{k}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.07847em;&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;∈&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:-0.00773em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of size &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;m&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;br /&gt;
We want to compute a &lt;strong&gt;transformation matrix&lt;/strong&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;U&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.68333em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.10903em;&quot;&gt;U&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; to reduce to &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;mo&gt;∈&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;Z \in R_{k}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.68333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.83333em;vertical-align:-0.15em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.07153em;&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;∈&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.00773em;&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:-0.00773em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; where &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;k &amp;lt; n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.73354em;vertical-align:-0.0391em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, &lt;br /&gt;
So that &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; Z = U^{T} X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8413309999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.8413309999999999em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.07153em;&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.10903em;&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.13889em;&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.07847em;&quot;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another great visualized example of PCA can be found &lt;a href=&quot;http://setosa.io/ev/principal-component-analysis/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To normize data to similar scale, we perform a data transformation defined as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Training set: &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mo separator=&quot;true&quot;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;.&lt;/mi&gt;&lt;msup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; x^{(1)}, x^{(2)}... x^{(m)} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8879999999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.0824399999999998em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mpunct&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord mathrm&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:-0.363em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;
&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; \mu_{j} = \frac{1}{m} \sum x_{j}^{(i)} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.0448em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.4577719999999998em;vertical-align:-0.4129719999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;μ&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mord reset-textstyle textstyle uncramped&quot;&gt;&lt;span class=&quot;sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mfrac&quot;&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.345em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-0.22999999999999998em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle textstyle uncramped frac-line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-0.394em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathrm&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;op-symbol small-op mop&quot; style=&quot;top:-0.0000050000000000050004em;&quot;&gt;∑&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.2768639999999999em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-0.5198em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;br /&gt;
Replace each &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; x_{j}^{(i)} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.0448em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.4577719999999998em;vertical-align:-0.4129719999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.2768639999999999em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-0.5198em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; with &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msubsup&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mo&gt;(&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/msubsup&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt; \mu_{j} - x_{j}^{(i)} &lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:1.0448em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:1.4577719999999998em;vertical-align:-0.4129719999999999em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;μ&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.15em;margin-right:0.05em;margin-left:0em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;vlist&quot;&gt;&lt;span style=&quot;top:0.2768639999999999em;margin-left:0em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord scriptstyle cramped&quot;&gt;&lt;span class=&quot;mord mathit&quot; style=&quot;margin-right:0.05724em;&quot;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;top:-0.5198em;margin-right:0.05em;&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;reset-textstyle scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mord scriptstyle uncramped&quot;&gt;&lt;span class=&quot;mopen&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mord mathit&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;mclose&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;baseline-fix&quot;&gt;&lt;span class=&quot;fontsize-ensurer reset-size5 size5&quot;&gt;&lt;span style=&quot;font-size:0em;&quot;&gt;​&lt;/span&gt;&lt;/span&gt;​&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The benefit of &lt;strong&gt;feature scaling&lt;/strong&gt; is to speed up the computation of algorithm later on, you can read more about &lt;a href=&quot;http://stackoverflow.com/questions/26225344/why-feature-scaling&quot;&gt;why feature scaling&lt;/a&gt; to learn the rationale behind it.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To Be Continued&lt;/h2&gt;

&lt;p&gt;In the following blogpost, we will discuss more foundation ideas behind &lt;strong&gt;prototyping algorithms&lt;/strong&gt;, &lt;strong&gt;evaluating algorithms&lt;/strong&gt; and build &lt;strong&gt;large machine learning (ML) systems&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://mshen.me/machine-learning-foundation_1/</link>
        <guid isPermaLink="true">http://mshen.me/machine-learning-foundation_1/</guid>
      </item>
    
      <item>
        <title>Troubleshoot Rails database migration</title>
        <description>&lt;p&gt;Every now and then I run into database migration error using Rails, so I write this blogpost to dissect this problem.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;

&lt;p&gt;When I work on my development branch, and I have some migrations to run, it works fine if I run &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;. However, when I rebase a remote branch with outstanding migrations, if I run &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt;, I may get the following error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQLException: duplicate column name: some_column_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;the-cause&quot;&gt;The Cause&lt;/h2&gt;

&lt;p&gt;We work in a mulit-developer environment, and new database migrations are being developed separately. We are also committing to &lt;code class=&quot;highlighter-rouge&quot;&gt;db/schema.rb&lt;/code&gt; into our git, which makes it possible to have &lt;strong&gt;conflicting timestamp on the schema entry&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, the problem arises if my local migrations are not in sync with the database schema. This happens  when a remote branch is rebased into a local branch and a rebase conflict needs to be resolved by manually modifying &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt;. When &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; is run, Rails rely on &lt;code class=&quot;highlighter-rouge&quot;&gt;schema_migrations&lt;/code&gt; tables to recognize which migrations have been run.&lt;/p&gt;

&lt;h2 id=&quot;the-fix&quot;&gt;The Fix&lt;/h2&gt;

&lt;p&gt;Follow these 3 steps to troubleshoot the problem&lt;/p&gt;

&lt;h3 id=&quot;step-1-compare-schemamigrations-on-remote-and-local-database&quot;&gt;Step 1. compare &lt;code class=&quot;highlighter-rouge&quot;&gt;schema_migrations&lt;/code&gt; on remote and local database&lt;/h3&gt;

&lt;p&gt;Open up &lt;code class=&quot;highlighter-rouge&quot;&gt;rails db_console&lt;/code&gt; on local and remote database, and run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SELECT * FROM schema_migrations;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Compare the entries side by side to detect the difference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/schema_diff.png&quot; alt=&quot;schema_diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source of truth for schema timestamp should be the master branch of the application cdode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/master_schema.png&quot; alt=&quot;master_schema&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-identify-missing-schemamigrations-entry-on-remote&quot;&gt;Step 2. Identify missing &lt;code class=&quot;highlighter-rouge&quot;&gt;schema_migrations&lt;/code&gt; entry on remote&lt;/h3&gt;

&lt;p&gt;Add the missing entry to the remote table, but ** don’t remove any entry on remote &lt;strong&gt;. Follow a **only add, never remove&lt;/strong&gt; strategy. In the example above, add &lt;em&gt;20161001032849&lt;/em&gt; entry to the remote.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; INSERT INTO schema_migrations VALUES ('20161001032849');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;step-3-verify-the-entry-on-remote-schemamigrations&quot;&gt;Step 3. Verify the entry on remote &lt;code class=&quot;highlighter-rouge&quot;&gt;schema_migrations&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/correct_schema.png&quot; alt=&quot;correct_schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; should work fine on the remote server!&lt;/p&gt;

&lt;h2 id=&quot;the-takeaways&quot;&gt;The takeaways&lt;/h2&gt;

&lt;p&gt;Two things we can do better to prevent the schema error:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;When encontering merging conflicts on &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt; file, pay attention to the timestamp and identify which timestamp number to use.&lt;/li&gt;
  &lt;li&gt;When running &lt;code class=&quot;highlighter-rouge&quot;&gt;rake db:migrate&lt;/code&gt; fails locally, don’t run &lt;strong&gt;rake db:reset&lt;/strong&gt;, instead looking into &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt; file and correct the timestamp version within &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.rb&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/compare_schema_version.png&quot; alt=&quot;comparing_schema_version&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/troubleshoot-rails-database-migration/</link>
        <guid isPermaLink="true">http://mshen.me/troubleshoot-rails-database-migration/</guid>
      </item>
    
      <item>
        <title>Build Rules Engine using Functional Programming</title>
        <description>&lt;h2 id=&quot;what-is-rules-engine&quot;&gt;What is rules engine&lt;/h2&gt;

&lt;p&gt;Rules engine is a common type of software for business. In Wikipedia, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Business_rules_engine&quot;&gt;definition&lt;/a&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A business rules engine is a software system that executes one or more business rules in a runtime production environment…&lt;/p&gt;

  &lt;p&gt;Rule engines typically support rules, facts, priority (score), mutual exclusion, preconditions, and other functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use an over-simplified equation to represent a rules engine:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Data + Rules = Solution
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before we discuss how to build rules engine we define how we identify a good rules engine. A good rules engine should have three business traits: &lt;strong&gt;feasibility&lt;/strong&gt;, &lt;strong&gt;extensibility&lt;/strong&gt;, and &lt;strong&gt;measurability&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feasibility.&lt;/strong&gt; Given a set of rules and a data set, a rules engine should be able to produce a feasible solution. Same inputs can always reproduce the same output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extensibility.&lt;/strong&gt; A rules engine can adapt to business change easily.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Measurability.&lt;/strong&gt; A rule engine should know how to assess a solution based on rules and dataset.&lt;/p&gt;

&lt;p&gt;Given the three traits above, we will discuss different ways to build a rules engine by studying a mock case.&lt;/p&gt;

&lt;h2 id=&quot;build-rules-engine&quot;&gt;Build rules engine&lt;/h2&gt;

&lt;p&gt;Think of a case of content programming on Youtube. The task is to build an algorithm that compiles a playlist for content videos with sponsored ads. There are two datasets to build this list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A collection of content videos&lt;/li&gt;
  &lt;li&gt;A collection of ad videos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that each video has its duration.&lt;/p&gt;

&lt;p&gt;We also have a set of rules that regulates how a playlist should be programmed. Simplifying the case, the playlist programming only has “IF condition THEN action” rule. A possible list of rules can be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the total duration of the playlists is 30 minutes.&lt;/li&gt;
  &lt;li&gt;No same video can be played back to back.&lt;/li&gt;
  &lt;li&gt;The ads can not be played more than 30% of total time.&lt;/li&gt;
  &lt;li&gt;No ads can be played back to back.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rules above include two types: one type of rules that help determine “what to play,” and the other type of rules that determines “how to play given what to play.” We can think of “what to play” rules as &lt;em&gt;selection rules&lt;/em&gt;, and “how to play given what to play” as &lt;em&gt;sorting rules&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/youtube_playlist.png&quot; alt=&quot;youtube_mock_case&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;object-oriented-approach-object-chain&quot;&gt;Object-Oriented approach: object chain&lt;/h3&gt;

&lt;p&gt;The problem can be broken into a set of small problems, and we can construct objects that hold the responsibility of solving a specific small problem. The object knows its state, and its data and functions.&lt;/p&gt;

&lt;p&gt;We can divide the playlist programming problem into three smaller steps: select,  sort and validate.  We construct &lt;em&gt;Selector&lt;/em&gt;, &lt;em&gt;Sorter&lt;/em&gt;, and &lt;em&gt;Validator&lt;/em&gt;. Each object has a single responsibility of solving a small problem.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Object&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Reponsibility&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Selector&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Find all the videos based on selection rules&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sorter&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Generate a playlist based on the selected videos and sorting rules&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Validator&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;Measure how good the generated playlist is&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Below is a visual overview of how the objects interact in the process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/oo_rules_engine.png&quot; alt=&quot;oo_rules_engine.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our code might look like the following:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9f093c3b3b0a24dc3df69adcbab26c6a.js?file=selector.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9f093c3b3b0a24dc3df69adcbab26c6a.js?file=sorter.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9f093c3b3b0a24dc3df69adcbab26c6a.js?file=validator.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Two drawbacks exist in this approach. Regarding extensibility, the structure of Selector, Sorter and Validator may not be flexible enough to accommodate a new business case because both classes have established attributes and states. Also, each object depends on attributes from the previous object (Sorter relies on Selector, validator relies on Sorter); such dependency might cause unexpected errors if the dependent data is not present.&lt;/p&gt;

&lt;p&gt;Regarding measurability, we can write integration tests to verify the correctness of output given certain inputs, but it’s more complicated to write unit testing. To do so we need to mock out an object’s dependent objects as well as their state and data, then verify that the state and data of tested object class are correct.&lt;/p&gt;

&lt;h3 id=&quot;functional-approach-function-pipeline&quot;&gt;Functional approach: function pipeline&lt;/h3&gt;

&lt;p&gt;Using Functional Programming paradigm, the playlist programming can be divided into a set of small functions. All steps take a data hash as its inputs and outputs a data hash with the same structure. Each step appends its key-pair inside the hash, and it passes on the hash to next step.&lt;/p&gt;

&lt;p&gt;Below is a visual overview of how the functions interact in the process:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/functional_rules_engine.png&quot; alt=&quot;functional_rules_engine.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our code might look like the following:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9f093c3b3b0a24dc3df69adcbab26c6a.js?file=rules_engine.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9f093c3b3b0a24dc3df69adcbab26c6a.js?file=youtube.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Several benefits stand out using this approach. The rules engine becomes more adaptable to business change. Because no function depends on other function, we can easily swap in and out new functions as long as that function understands the input and provides expected output.&lt;/p&gt;

&lt;p&gt;Additionally, writing tests for individual function becomes easier because we can verify given certain inputs, the function computes an expected output. Lastly, regarding development, function pipeline gave developers the flexibility to adjust algorithms, many times we overcome a technical difficulty by adding a new function to the pipeline.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Considering the standards of a good rules engine, I find the functional programming a better approach in building flexible rules engine.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/build-rules-engine-using-functional-programming/</link>
        <guid isPermaLink="true">http://mshen.me/build-rules-engine-using-functional-programming/</guid>
      </item>
    
      <item>
        <title>Web / Mobile prototype techniques</title>
        <description>&lt;p&gt;In general, prototyping goes through the following phases: &lt;strong&gt;ideation&lt;/strong&gt;, &lt;strong&gt;wireframing&lt;/strong&gt;, and &lt;strong&gt;development&lt;/strong&gt;. Each stage has specific objectives. A good ideation process is collaborative, a good wireframing process is iterative, and a good development process is simplistic.&lt;/p&gt;

&lt;h2 id=&quot;user-focused-ideation&quot;&gt;User-focused Ideation&lt;/h2&gt;

&lt;p&gt;Ideation sorts out relevant information on ideas. Before ideation, a new includes many open questions. For example, in building an Airbnb search page, the initial problem might be presented as the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As a user, I want to be able to find a place to stay for my upcoming trip.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This sentence indicates several directions to explore. First, “user” is an ambiguous term, clarifying questions on demographics helps identify stakeholders. Second, the user need is vague, questions like the type of places and the type of trips must be addressed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Identify personas around stakeholders&lt;/strong&gt;. Build a persona as concrete as possible. It’s best if real stakeholders are present during the prototyping process. Set up persona profile, a profile may look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/persona.png&quot; alt=&quot;personal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conduct User Interview&lt;/strong&gt;. After identifying stakeholders, schedule interviews with them. The goal is to gain insights on user behavior. Doing a successful user interview takes practice, there are several practical and mental toolkit that can make us successful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay focused on the goal.&lt;/strong&gt; Understand what to study before the interview, and pay attention to any information that helps achieve that goal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brainstorm, then consolidate interview questions.&lt;/strong&gt; Try to come up with as many relevant questions as possible, then cut the questions based on a time limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be early, end early. Be courteous of interviewee’s time.&lt;/strong&gt; Interviewers should be well-prepared and make use of the interviewee’s time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asking why during the interview.&lt;/strong&gt; Use a &lt;em&gt;laddering technique&lt;/em&gt; to gain insights into user behavior. For example, an exchange of user interview may look something like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Q: What place do you want to stay at?
A: I want to stay at someone’s private home for my travel.
Q: Why do you want to stay at someone’s private home?
A: Because I want to meet some interesting local people.
Q: Why do you want to meet some interesting local people?
A: Because I want to feel the culture at the place and experience local lifestyle.
Q: Why is it important to experience local lifestyle?
A: Because I want to feel belonged to the local community during my time of travel.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After asking “why,” the interview finding went from vacation preference to the sense of belonging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be non-judgmental.&lt;/strong&gt; Some answers from users might be different from how interviewer perceives the world. It’s a skill to be non-judgmental. Keep in mind that everyone has different perspectives, and different perspectives help build better products.&lt;/p&gt;

&lt;p&gt;Map out user flows by using a story map. It tells people’s reaction, action, and feelings at important points during an experience. In a way, it’s storytelling of interaction between the users and the product. A journey map may look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/journey_map.png&quot; alt=&quot;journey_map&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;iterative-wireframing&quot;&gt;Iterative Wireframing&lt;/h2&gt;

&lt;p&gt;After ideation, turn the ideas into concrete mock-up screens. At this stage, it is still ambiguous what the final screens  look like. Any good design needs to be evaluated in various ways and improve over time. Good wireframing, like any other good design, requires multiple rounds of evaluation and improvement. A few actions can make the process productive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sketch multiple versions of screens.&lt;/strong&gt; Treat the sketch as brainstorming based on more relevant information from ideation. Try to build a product from different perspective using the information from ideation. Another benefit of providing multiple versions is that it gets less personal. When the team discuss different versions of sketches, feedback is less personal and more towards the goal of building a good product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Brainstorm sketch based on user flow.&lt;/strong&gt; Start with the big picture of user flow. Think about the intention of users, interaction between users and the product, and outcome of the interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start with a paper prototype.&lt;/strong&gt; It’s unnecessary to invest energy in details from the get-go because details will change. Use pen and paper, encourage the whole team to participate. It doesn’t matter if someone is a good drawer, paper prototyping lets ideas out of the head and put them into reality. A mobile paper prototype may look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/paper_prototype.png&quot; alt=&quot;paper_prototype&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After paper prototype, consolidate screens into a low-fidelity prototype.&lt;/strong&gt; Identify and prioritize key features from the paper prototype, and put them into a few black-white digital mockup screens. A black-white digital mockup screen is called low-fidelity screen, and a web low-fidelity screen can look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/low_fidelity.png&quot; alt=&quot;low_fidelity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turn low-fidelity prototype into high fidelity prototype.&lt;/strong&gt; A low-fidelity prototype should show user flow and key features of a product. A high-fidelity incorporates designs details like color and fonts; it looks and feels like a real product, and it can generate more feedback. A mobile high-fidelity prototype can look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/high_fidelity.png&quot; alt=&quot;high_fidelity&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;collaborative-development&quot;&gt;Collaborative Development&lt;/h2&gt;

&lt;p&gt;After high-fidelity screens, designers hand over screens to developers. During the development stage, designers and developers collaborate to build out a front-end prototype, with minimal support of back-end. Several practices can increase productivity at this stage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frequent design feedback.&lt;/strong&gt; Developers may pay attention to code quality but ignore design details of screens. When a screen is coded out, ask the designer for feedback, which ensures the visual quality of the product.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design matters.&lt;/strong&gt; Keep the mindset of “design matters” in the course of development. Many developers pay attention to code quality but tend to ignore visual details of a screen (e.g. color, paddings of a button, etc). For a quality product, the design must be of high priority. It’s an important mindset change for any developer who wants to build quality products.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divide and conquer.&lt;/strong&gt; Approach a complicated screen with simplicity in mind. Break down development tasks into achievable sub-tasks, keep each subtask simple and focus on them in order.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overall layout.&lt;/li&gt;
  &lt;li&gt;Identify different UI component.&lt;/li&gt;
  &lt;li&gt;Develop each component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to develop for a mobile screen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/prototype_development.png&quot; alt=&quot;development&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overall layout. The screen has a top navigation, a bottom navigation, and a body with lists and filters.&lt;/li&gt;
  &lt;li&gt;Identify different UI components. It has four main components: a top navigation, a bottom navigation bar, a list filter, and a list view.&lt;/li&gt;
  &lt;li&gt;Develop each component. The techniques of developing those components is its own post; one suggestion is to realistic mock data. It helps developers get a sense of what the prototype will look like in production.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prototyping a new product is fun! There are many great techniques, and this post is just a tiny collection from my humble experience.&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/web-mobile-prototype-techniques/</link>
        <guid isPermaLink="true">http://mshen.me/web-mobile-prototype-techniques/</guid>
      </item>
    
      <item>
        <title>Understand Vue.js Computed Property</title>
        <description>&lt;p&gt;Computed Properties are data that is composed using other data; it helps organize logic using Vue.js data attributes. One use case is to build “selectAll” checkboxes. Imagine making checkboxes to select types of amenities for a summer trip. Several features are specified for “selectAll” checkbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vue_checkbox.png&quot; alt=&quot;vue_checkbox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Select all amenities&lt;/em&gt;. When “selectAll” checkbox is selected, all the checkboxes will be selected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Select individual amenity&lt;/em&gt;. When an individual checkbox is selected, only that checkbox is selected, and nothing else.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unselect all amenities&lt;/em&gt;. If  “selectAll” is unchecked, all the checkboxes will be unchecked, regardless of the state of each checkbox.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unselect individual amenity&lt;/em&gt;. When an individual checkbox is unchecked, that checkbox is unchecked, and also “selectAll” checkbox is unchecked.&lt;/p&gt;

&lt;p&gt;The basic boolean value is set on individual options under Vue data:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data: {
     options: [
      { id: 1, text: 'Airline Ticket', checked: false },
      { id: 2, text: 'Hotel', checked: false },
      { id: 3, text: 'Car', checked: false}
     ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On top of basic boolean values, a computed property “allSelected” is built based on the states of all items. If the boolean value “checked” on each option is set “true,” then “allSelected” returns true. Otherwise “allSelected” return false. The attribute “selectedAll” depends on data and logic, and it’s a perfect use case for Vue.js computed property.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;computed: {
  allSelected: function(){
    for (var i = 0; i &amp;lt; this.options.length; i++){
      if (this.options[i].checked == false) {
        return false;
      }
    }
    
    return true;
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On each option, we register an action that can toggle the “checked” value on each item.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;methods: {
   toggleOption: function(option){
    var checked = option.checked
    option.checked = !checked;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On “selectAll”, we register an action that can toggle the “checked” value across all items. Because “selectAll” resets all options, the scope of toggled value needs to be outside of the for loop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toggleAll: function(){
  var checked = this.allSelected;
  for (var i = 0; i &amp;lt; this.options.length; i++){  
    this.options[i].checked = !checked;
  }
},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The complete script of this feature is below:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//jsfiddle.net/mshen1226/d49go70f/7/embedded/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Computed Property is a popular concept existing in many modern JS frameworks such as Vue.js and Ember.js. It’s a powerful tool to simplify and organize logic units in the application.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/understand-vue-js-computed-property/</link>
        <guid isPermaLink="true">http://mshen.me/understand-vue-js-computed-property/</guid>
      </item>
    
      <item>
        <title>Productive Programming Habits</title>
        <description>&lt;p&gt;I work in an open-office space. I am a pretty social guy. I love that I can feel that my co-workers are around, interact with them, and ask them questions in person. However, sometimes when my mind is focusing on solving a coding problem, an urgent bugfix, or think abstractly about application design, I need to dive deep into a subject for a long time. I start to explore different ways to make my development day productive, and I want to share what have been working for me.&lt;/p&gt;

&lt;p&gt;Being a productive programmer means that we know &lt;em&gt;how to measure&lt;/em&gt;, &lt;em&gt;how to focus&lt;/em&gt;, and &lt;em&gt;how to divide and conquer a big task&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;measure-productivity&quot;&gt;Measure productivity&lt;/h3&gt;

&lt;p&gt;To become more productive, we first must know how to measure productivity. Establishing a concrete measurement can guide us to make better use of our time. We can start tracking our time and give ourselves a week where we log every single hour of our work day.  In fact, this approach isn’t new to many of us. Some companies require timesheet for billing reasons. We can develop the similar timesheet for productivity.&lt;/p&gt;

&lt;p&gt;Another technique that I find very useful is called “Pomodoro Technique.” This method divides time into 25-minute sessions; each session is a work unit, and we take a short break after each session. After a day, we can count how many Pomodoro sessions we finished. I use this method to track my development time on a daily basis.&lt;/p&gt;

&lt;h3 id=&quot;deep-focus&quot;&gt;Deep focus&lt;/h3&gt;

&lt;p&gt;Programming requires intensive concentration on a subject. With so many distractions around us, it takes effort not to multitask. However, to maximize our programming throughput, our brain needs to get away from distractions. Even in an open space, there are certain things we can do to minimize distraction. I’ve been doing the following:&lt;/p&gt;

&lt;p&gt;Buy a noise-cancelling headphone.  Noise-cancelling headphones are not cheap but well worth the investment. I have a &lt;a href=&quot;https://www.amazon.com/gp/product/B00M1NEUA0&quot;&gt;Boise acoustic headphone&lt;/a&gt; and I love wearing it when I am programming. I also inform my co-workers not to interrupt me when I have my headphones on, and they can leave a chat message if they need to reach me.&lt;/p&gt;

&lt;p&gt;Divide focus session using “Pomodoro technique.” I follow 25-minute  session and take a break after each session. During the break, I will walk around, try to relax, and also catch up on chat in case someone needs my immediate attention. One nice thing about Pomodoro session is that I can always catch up with others and make sure nothing urgent is left unresolved for too long.&lt;/p&gt;

&lt;p&gt;Shut off chat, social media, even Internet. That 25-minute should be away from any distractions. In the beginning, it was tempting to check social media during the session. I did my best to resist the urge and focus on the task at hand; the urge diminished eventually, and I find each session more productive.&lt;/p&gt;

&lt;h3 id=&quot;develop-checklists&quot;&gt;Develop checklists&lt;/h3&gt;

&lt;p&gt;We know how to track productivity and how to schedule focus session, we also need to develop a habit to make each focus session productive. When we face a complicated task, it may appear overwhelming because many things need to be taken care of for it to work. For example, if we are developing a feature for an iOS app, it may require many things to work, such as API connection, user interface transitions, and so on.&lt;/p&gt;

&lt;p&gt;When facing a complicated task, we can divide it into smaller tasks, and conquer smaller pieces individually. We can take a step back and think about what are the smaller steps we must accomplish, WRITE THEM DOWN, ONE BY ONE, and check each sub-step off as we go through them. This checklist technique can reduce mental overhead and make sure that we don’t miss any steps, and also allow us to go back and check history in case something goes wrong.&lt;/p&gt;

&lt;p&gt;For example, let’s say we’re developing a feature within an auction app that allows users to submit bids. The technique may be like this&lt;/p&gt;

&lt;p&gt;As a user, when I log on the app, and I saw an auction item, I should be able to bid on an item&lt;/p&gt;

&lt;p&gt;We can break it down to the following checklist:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Develop the frame for the UI of showing the auction item&lt;/li&gt;
  &lt;li&gt;Develop the section for picture for auction item&lt;/li&gt;
  &lt;li&gt;Develop the section for details text for auction item&lt;/li&gt;
  &lt;li&gt;Develop the submit price button for auction item&lt;/li&gt;
  &lt;li&gt;Wire the action of submitting price button, with dummy API call&lt;/li&gt;
  &lt;li&gt;Develop backend API for submitting price&lt;/li&gt;
  &lt;li&gt;Connect the backend API with the action&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This checklist allows us to focus on each step and make increment progress along the way, and this techniuque is also discussed in detail in the book &lt;a href=&quot;https://www.goodreads.com/book/show/6667514-the-checklist-manifesto?ac=1&amp;amp;from_search=true&quot;&gt;checklist manifesto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Making ourselves more productive is a joyful process. We should put attention towards how to work smarter every day. In the comment, feel free to share thoughts on the post, or share others productive tips with us!&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/productive-programming-habits/</link>
        <guid isPermaLink="true">http://mshen.me/productive-programming-habits/</guid>
      </item>
    
      <item>
        <title>Build Hacker News clone using Vue.js</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt; has a sample project of building Hacker News clone using Vue.js, this blog breaks it down to seven steps and demonstrate how to build the Hacker news clone from start to finish.&lt;/p&gt;

&lt;h2 id=&quot;step-1-basic-project-set-up&quot;&gt;Step 1: Basic Project set up&lt;/h2&gt;

&lt;p&gt;We will need to set up the basic project directory and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; package manager. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a project directory
mkdir hacker_news_clone_guide&lt;/li&gt;
  &lt;li&gt;create an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;create an empty &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;create &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;upload logo to &lt;code class=&quot;highlighter-rouge&quot;&gt;static/logo.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/main.js&lt;/code&gt; is going to be the entry Javascript file of the entire project. &lt;code class=&quot;highlighter-rouge&quot;&gt;src/&lt;/code&gt; directory contains application code. &lt;code class=&quot;highlighter-rouge&quot;&gt;static/&lt;/code&gt; directory contains static assets such as images.&lt;/p&gt;

&lt;p&gt;Now we need to initiate &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; by running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; within the package, after the command we should see &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; existed in the directory. Inside &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, we manages external Javascript package dependencies.&lt;/p&gt;

&lt;p&gt;We will install &lt;em&gt;webpack&lt;/em&gt; by running&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install webpack -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we use &lt;em&gt;webpack&lt;/em&gt; to point &lt;em&gt;main.js&lt;/em&gt; to &lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;webpack ./src/main.js webpack.config.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the end of step 1, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/7b53a22190d65a82623214753a4bb52bf3a64a38&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-create-indexhtml-and-appvue&quot;&gt;Step 2: create index.html and App.vue&lt;/h2&gt;

&lt;p&gt;Modify &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; to be the following:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f7aa1614c1714be29e68bd2e36997179.js?file=index_1.html&quot;&gt; &lt;/script&gt;

&lt;p&gt;Notice that “&amp;lt;div id=“app”&amp;gt;&amp;lt;/div&amp;gt;” is the main identifier of the Vue app. To build the app, we will use both &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue-router&lt;/code&gt;. We load the dependency and initiate the &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue&lt;/code&gt; router within &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; like the following:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f7aa1614c1714be29e68bd2e36997179.js?file=main_1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;First, we will create an &lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt; component that contains other components. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create directory “src/components”&lt;/li&gt;
  &lt;li&gt;create file “src/components/App.vue”&lt;/li&gt;
  &lt;li&gt;create file “src/variables.styl” for asset styling&lt;/li&gt;
  &lt;li&gt;add “App.vue” to “main.js” and modify the routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After the steps above, we will compile the project by running &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt;, it should compile successfully and we should see the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vue_step_2.png&quot; alt=&quot;vue_step_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the end of step 2, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/c50316bf494365677b09ea172e53e6571019a860&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-connect-hackernews-api&quot;&gt;Step 3: connect HackerNews API&lt;/h2&gt;

&lt;p&gt;We need to use &lt;a href=&quot;https://github.com/HackerNews/API&quot;&gt;Hacker News API&lt;/a&gt; to fetch real data, and we need to use the following APIs:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Sample URL&lt;/th&gt;
      &lt;th&gt;Data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/v0/topstories.json&lt;/td&gt;
      &lt;td&gt;returns a list of item IDs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/v0/item/12430298.json&lt;/td&gt;
      &lt;td&gt;returns a specific item with ID, an item can be a comment, an ask, a poll in Hacker News&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/v0/user/jl.json&lt;/td&gt;
      &lt;td&gt;returns information for a specific user&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We will also later handle &lt;em&gt;pagination&lt;/em&gt; by combining the results of three APIs we are using. To build the API client, we isolate the calls within &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; directory and file &lt;code class=&quot;highlighter-rouge&quot;&gt;store/index.js&lt;/code&gt;. We have the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create &lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt; folder&lt;/li&gt;
  &lt;li&gt;create “store/index.js” its only responsibility is to make API calls to Hacker News&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the end of step 3, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/bd70d7b2cf3bf40383c54b0958b7dfd3dcb84377&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-register-vue-filter&quot;&gt;Step 4: register Vue filter&lt;/h2&gt;

&lt;p&gt;We will build the feature to show when an item is posted on Hacker News, and the domain in which the source comes from. &lt;a href=&quot;https://vuejs.org/guide/custom-filter.html&quot;&gt;Vue custom filter&lt;/a&gt; is a great tool for that. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create directory “src/filter”&lt;/li&gt;
  &lt;li&gt;create file “src/filter/index.js”, and we will register the filter functions within &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;register &lt;em&gt;Vue filters&lt;/em&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the end of step 4, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/4bd87730486cd182c9c41b751a2caeb97d7d6fee&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5-create-components-for-news-board-and-each-news&quot;&gt;Step 5: create components for news board and each news&lt;/h2&gt;

&lt;p&gt;Now we’re ready to create the main page of Hacker News! On the main page, we will have the a big frame that includes each piece of news. We will separate them into “News” component and “Item” component. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create “src/components/NewsView.vue”&lt;/li&gt;
  &lt;li&gt;create “src/components/Item.vue”, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NewsView.vue&lt;/code&gt; includes &lt;code class=&quot;highlighter-rouge&quot;&gt;Item.vue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Register  com in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/main.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add routes to &lt;code class=&quot;highlighter-rouge&quot;&gt;NewsView.vue&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;default the entry route to &lt;code class=&quot;highlighter-rouge&quot;&gt;NewsView.vue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finish the steps above, run &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; and it should compile successfully and we should the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vue_step_5.png&quot; alt=&quot;vue_step_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the end of step 5, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/ccacadedaef459080bb248864f089ba6543eb2b7&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-6-create-component-for-users&quot;&gt;Step 6: create component for users&lt;/h2&gt;

&lt;p&gt;On each item of the HackerNews page, we should be able to click into a user and see her detailed information. So we can add another component for &lt;code class=&quot;highlighter-rouge&quot;&gt;UserView&lt;/code&gt;. The component should also have its own route as well. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create file “components/UserView.vue”&lt;/li&gt;
  &lt;li&gt;register the new route in “main.js”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compile using “webpack”, it should compile successfully, when you click into a user, then you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vue_step_6.png&quot; alt=&quot;vue_step_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the end of step 6, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/25b9f1d0f506899b5aa814f22b97e48a9f130189&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-7-create-component-for-comments-and-polls&quot;&gt;Step 7: create component for comments and polls&lt;/h2&gt;

&lt;p&gt;The last piece is the comment section. When we click on comments link we should see a detailed page of comment exchange. Filters and User information should also apply in the comment, so we can reuse some of the components we already built. It has the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create file “components/Comment.vue”, the component is already linked within “Item.vue”.&lt;/li&gt;
  &lt;li&gt;create file “components/ItemView.vue”.&lt;/li&gt;
  &lt;li&gt;register the new route in &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compile using “webpack”, it should compile successfully, when you click into comments into a story, then you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vue_step_7.png&quot; alt=&quot;vue_step_7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the end of step 7, you can see the commit &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commit/6f42b73ce3c74b7de86b1a60140f06766e2180a1&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! We build the HackerNews clone using 7 steps. The blogpost is based on &lt;a href=&quot;https://github.com/vuejs/vue-hackernews&quot;&gt;Vue.js HackerNews Clone&lt;/a&gt; and I also pushed the &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide&quot;&gt;guide repo&lt;/a&gt; for the tutorial. You can find each step organized in separate commits &lt;a href=&quot;https://github.com/marshallshen/vue-hackernews-guide/commits/master&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I started learning &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt; I wanted to follow a step-by-step guide to build a &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt; app, and this blogpost is a tutorial I wish had existed. Please leave your comment on how I can improve this tutorial so people can find it helpful for them! Thanks for reading!&lt;/p&gt;

</description>
        <pubDate>Tue, 06 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/step-by-step-guide-of-building-hacker-news-clone-using-vue-js/</link>
        <guid isPermaLink="true">http://mshen.me/step-by-step-guide-of-building-hacker-news-clone-using-vue-js/</guid>
      </item>
    
      <item>
        <title>Responsive Web with Rails and Vuejs</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Rails is a great web framework and Vue.js is a powerful and minimal Javascript framework. In this tutorial, we will learn how to effectively use Rails and Vue.js together.&lt;/p&gt;

&lt;p&gt;we will build a clone site of Airbnb called Vuebnb. The website renders place listings based on which room type you select. Below are the code and demo site for this tutorial:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuebnb.herokuapp.com/&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/marshallshen/vuebnb&quot;&gt;Source Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Below is the snapshot of what the one page looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vuebnb.jpg&quot; alt=&quot;vuebnb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tutorial has two parts, the first part is building Rails backend with one HTML/HAML page. The second part is integrating that one frontend page with &lt;em&gt;Vue.js&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rails-backend&quot;&gt;Rails Backend&lt;/h2&gt;

&lt;p&gt;For the simple page page, we have two models involved: &lt;em&gt;place&lt;/em&gt; and &lt;em&gt;host&lt;/em&gt;. A &lt;em&gt;host&lt;/em&gt; can have many &lt;em&gt;places&lt;/em&gt;. Generate &lt;em&gt;place&lt;/em&gt; model using a Rails command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails g model Place city:string price:integer place_type:string host_id:integer image_url:string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Generate &lt;em&gt;host&lt;/em&gt; model using another Rails command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails g model Host name:string profile_url:string
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We should have models as following:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=host.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=place.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we will build out API endpoints for fetching places and hosts. This will later be used by AJAX callback on our page. Following the practice of Test Driven Development, we will first defined our test case, we will use Rspec 3 as our app testing framework.  We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveModel::Serializer&lt;/code&gt; to standardize our JSON payload. We will use the standard JSON payload and reflect it in our test cases.&lt;/p&gt;

&lt;p&gt;Let’s add &lt;code class=&quot;highlighter-rouge&quot;&gt;Serializer&lt;/code&gt; into our Gemfile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'active_model_serializers', '~&amp;gt; 0.10.0'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First we will write tests on the API we will build, in this blog post, we will first focus on building &lt;em&gt;places&lt;/em&gt; endpoint, so let’s start with &lt;em&gt;places_spec&lt;/em&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=places_spec.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Additionally, we can add tests for &lt;em&gt;hosts&lt;/em&gt; endpoint as well.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=hosts_spec.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let’s add routes, controllers and serializers to make tests pass&lt;/p&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt;&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=routes.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;controllers&lt;/code&gt; to places and hosts&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=places_controller.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=hosts_controller.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add &lt;code class=&quot;highlighter-rouge&quot;&gt;serializers&lt;/code&gt; for places and hosts&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=place_serializer.rb&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=host_serializer.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec spec&lt;/code&gt;, the tests should pass. We will add seed data to prepare for frontend development.&lt;/p&gt;

&lt;h2 id=&quot;vuejs-frontend&quot;&gt;Vuejs Frontend&lt;/h2&gt;

&lt;p&gt;Let’s add &lt;code class=&quot;highlighter-rouge&quot;&gt;vuejs&lt;/code&gt; into the app. We’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;vuejs-rails&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'vuejs-rails'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we add &lt;code class=&quot;highlighter-rouge&quot;&gt;vuejs&lt;/code&gt; into our Javascript dependency, we will also create a &lt;code class=&quot;highlighter-rouge&quot;&gt;vuebnb.js&lt;/code&gt; file and load it in our dependency tree too.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=application.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;em&gt;Vuejs&lt;/em&gt; use &lt;em&gt;el&lt;/em&gt; to bind DOM elements. Rather than using &lt;em&gt;div id&lt;/em&gt; or other CSS class, we will use &lt;em&gt;data attributes&lt;/em&gt; as the selector of our element.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=show-1.html.haml&quot;&gt; &lt;/script&gt;

&lt;p&gt;I try to avoid using &lt;em&gt;div id&lt;/em&gt; for code readability and I like that CSS is only used for decoration. Because we have &lt;em&gt;{data: {show_listing: true}}&lt;/em&gt;, now we can fetch the element using &lt;em&gt;[data-show-listing]&lt;/em&gt;. Let’s initialize our &lt;em&gt;Vue.js&lt;/em&gt; object.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=vuebnb-1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;After we initialize the &lt;em&gt;Vue.js&lt;/em&gt; object, let’s create our ajax call to fetch all the places.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=vuebnb-2.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we want to build the toggle feature: when different place type is selected, the result should change. We will use &lt;em&gt;computed property&lt;/em&gt; to render the real time change.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=vuebnb-2.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;On the HTML page, we use &lt;em&gt;filteredPlaces&lt;/em&gt; to render the page.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/023237734cc6864a9fd56a898c66a4b8.js?file=show-2.html.haml&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are many features we can build further. Feel free to fork the repo and try it! Over the years, &lt;em&gt;Rails&lt;/em&gt; community has developed some really neat concept for API servers. I also like how easy it is to hook &lt;em&gt;Vue.js&lt;/em&gt; into frontend.&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://mshen.me/build-responsive-web-with-rails-and-vuejs/</link>
        <guid isPermaLink="true">http://mshen.me/build-responsive-web-with-rails-and-vuejs/</guid>
      </item>
    
      <item>
        <title>Clojure Katas</title>
        <description>
</description>
        <pubDate>Thu, 01 Oct 2015 00:00:00 -0500</pubDate>
        <link>http://mshen.me/project-clojure-katas/</link>
        <guid isPermaLink="true">http://mshen.me/project-clojure-katas/</guid>
      </item>
    
      <item>
        <title>Anatomy of Empathy Dialogue System</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;HAL: I’m afraid. I’m afraid, Dave. Dave, my mind is going. I can feel it. I can feel it. My mind is going. There is no question about it. I can feel it. I can feel it. I can feel it. I’m afraid. Good afternoon, gentlemen. I am an HAL 9000 computer.         “2001: A Space Odyssey.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Human and machine are becoming more integrated. Nowadays, most dialogue systems are engaging and instruction-oriented: they tend to &lt;strong&gt;retrieve user intentions and provide instructions on those intentions&lt;/strong&gt;, dominant dialogue systems are well designed and sometimes, hilarious.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/siri_funny.png&quot; alt=&quot;siri_funny&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, such dialogue systems aren’t very &lt;strong&gt;personal&lt;/strong&gt;. The major intention is to provide information to the audience (users) rather than engaging the audience in a “give-and-take” conversations. Can we have &lt;strong&gt;real conversations&lt;/strong&gt; with machines? Can machine talk to us as our friends?&lt;/p&gt;

&lt;h3 id=&quot;a-dialogue-odyssey&quot;&gt;A dialogue odyssey&lt;/h3&gt;
&lt;p&gt;One major feature of a dialogue is the nature of &lt;strong&gt;turn-taking&lt;/strong&gt;. For example, in a dialogue between Tom and Jerry, Tom says something, then Jerry says something based on what Tom just said, and a dialogue flows by two characters contributing to one topic. As functional and fun as current dialogue system (Siri) can be, a dialogue between the system and the audience are short, usually one to three turns long.&lt;/p&gt;

&lt;p&gt;One major need of a human is to have &lt;strong&gt;meaningful conversations&lt;/strong&gt;: to talk to a friend, to share thoughts, stories and feelings. And meaningful conversations have &lt;strong&gt;different characteristics than current human-machine dialogue systems&lt;/strong&gt;: they usually last long, with a lot more than a few turns. Each turn has fewer sentences and information. Ultimately, after a meaningful conversation, people feel heard rather than just informed.&lt;/p&gt;

&lt;p&gt;Because of these fundamental feature differences, one interest question in building a dialogue system thus arise:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can we build dialogue systems to engage the audience in meaningful conversations as if the audience is talking to a friend?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One way to measure “I felt heard” is by measure how &lt;strong&gt;empathetic&lt;/strong&gt; the conversation partner is, to rephrase the question above:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Can we build an emphatic dialogue system for the audience (users)?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;put-empathy-in-a-dialogue-system&quot;&gt;Put “empathy” in a dialogue system&lt;/h2&gt;
&lt;p&gt;Conversation is naturally complex. Writing a system to carry a meaningful conversation is therefore inherently complex. To start off, we begin with a set of questions that need to be addressed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How to &lt;strong&gt;model&lt;/strong&gt; empathy in a dialogue system?&lt;/li&gt;
  &lt;li&gt;How to &lt;strong&gt;measure&lt;/strong&gt; empathy in a dialogue system?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;how-to-model-empathy&quot;&gt;How to model empathy&lt;/h3&gt;
&lt;p&gt;First, what makes a conversation empathetic? In other words, what makes us feel heard? We have all experienced great conversations where sharing becomes spontaneous; words flow naturally, and we &lt;strong&gt;feel great&lt;/strong&gt;. The effects of empathy has the following traits (although I’m no linguistic nor psychology expert):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dialogue lasts longer, comparing to a unempathetic dialogue.&lt;/li&gt;
  &lt;li&gt;Audience experience happiness and gratitude.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Second, a dialogue is unique from the linguistic perspective: unlike monologue, the speaker and hearer must constantly establish common ground, the set of things that are mutually believed by both speakers. They need to achieve common ground means that the hearer must ground or acknowledge the speaker’s utterances, or else make it clear that the there was a problem in reaching common ground.&lt;/p&gt;

&lt;p&gt;Therefore, we intend to build a dialogue system that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make a dialogue continue longer, based on a certain threshold of unempathetic dialogue scheme.&lt;/li&gt;
  &lt;li&gt;Aim to make the audience feel gratitude, measured by syntactic parsing of audience’s response.&lt;/li&gt;
  &lt;li&gt;Dynamically retrieve emotions, intentions of audience based on dialogue contexts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To implement based on these principles, we need to rely on more applied concepts in computational linguistics. Two major concepts are &lt;strong&gt;dialogue acts&lt;/strong&gt; and &lt;strong&gt;hidden Markov model&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;dialogue-acts&quot;&gt;Dialogue Acts&lt;/h4&gt;
&lt;p&gt;In computational linguistics, &lt;a href=&quot;http://en.wikipedia.org/wiki/Dialog_act&quot;&gt;dialogue acts&lt;/a&gt; is a categorization of different lines in a conversation. There are many different category schemes proposed. For example, the system proposed by Stolcke and Andreas, in their paper &lt;a href=&quot;http://web.stanford.edu/~jurafsky/ws97/CL-dialog.pdf&quot;&gt;“Dialogue Act Modeling..”&lt;/a&gt; includes over 20 categories. Another more general category, proposed by Searle, includes five generic types:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Class of dialogue acts&lt;/th&gt;
      &lt;th&gt;Meaning&lt;/th&gt;
      &lt;th&gt;Example&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Assertive&lt;/td&gt;
      &lt;td&gt;committing the speaker to something’s being the case&lt;/td&gt;
      &lt;td&gt;suggesting, putting forward, swearing, boasting, concluding&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Directive&lt;/td&gt;
      &lt;td&gt;attempts by the speaker to the get the addressee to do something&lt;/td&gt;
      &lt;td&gt;asking, ordering, requesting, inviting, advising, begging&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Commissive&lt;/td&gt;
      &lt;td&gt;committing the speaker to some future course of action&lt;/td&gt;
      &lt;td&gt;promising, planning, vowing, betting, opposing&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Expressive&lt;/td&gt;
      &lt;td&gt;expressing the psychological state of the speaker about a state of affairs&lt;/td&gt;
      &lt;td&gt;thanking, apologising, welcoming, deploring&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Declarative&lt;/td&gt;
      &lt;td&gt;bringing about a different state of the world via the utterance&lt;/td&gt;
      &lt;td&gt;I resign, you are fired.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;hidden-markov-model&quot;&gt;Hidden Markov Model&lt;/h4&gt;
&lt;p&gt;Think about dialogue as &lt;strong&gt;states&lt;/strong&gt;: on the outside, the lines appear in the conversation can be modelled as &lt;strong&gt;explicit states&lt;/strong&gt;, or &lt;strong&gt;visible states&lt;/strong&gt;. However, there are also &lt;strong&gt;implicit states&lt;/strong&gt;, or &lt;strong&gt;hidden states&lt;/strong&gt; of dialogue, such as &lt;a href=&quot;http://en.wikipedia.org/wiki/Part-of-speech_tagging&quot;&gt;part-of-speech tags&lt;/a&gt;, sentiments, intentions, so forth. Let’s look at a brief analysis of a dialogue from “2001: A Space Odyssey”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dr Frank Poole: Well, whaddya think?
Dave Bowman: I'm not sure, what do you think?
Dr Frank Poole: I've got a bad feeling about him.
Dave Bowman: You do?
Dr Frank Poole: Yeah, definitely. Don't you?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Use &lt;strong&gt;F&lt;/strong&gt; as Frank Poole, &lt;strong&gt;D&lt;/strong&gt; as Dave Bowman, we can model their dialogue as following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markov_example.png&quot; alt=&quot;markov example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will skip some technical details on how Hidden Markov Model works (you can read more on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Hidden_Markov_model&quot;&gt;wiki&lt;/a&gt;). In general, hidden Markov model can &lt;strong&gt;track invisible states&lt;/strong&gt;. In a dialogue, there are many invisible states we can capture, such as sentiment, or main subject of a conversation, etc.&lt;/p&gt;

&lt;p&gt;(Sidenote: Hidden Markov Model is one of the most common model applied in computational linguistics)&lt;/p&gt;

&lt;p&gt;Intuitively, we can build a system that includes the five different dialogue acts as five different strategies. Based on the context of the conversation, the system has a hidden Markov model that computes certain dialogue function for a conversation, and each round the system chooses a strategy to respond to the audience. A pseudo algorithm looks like the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message_of_audience = []
response_to_audience = []

empathy_model = new EmpathyModel(args*)

while(conversation_is_ongoing) {
  lastest_audience_message = captureResponse()
  records_of_audience.add(lastest_audience_response)

  empathy_model.computeEmpathyScores(records_of_audience)
  lastest_response = arg(max(empthy_model.scores_by_speec_acts)

  response_to_aduence.add(latest_response)
  output(lastest_response)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;objective-empathy&quot;&gt;Objective: Empathy&lt;/h3&gt;
&lt;p&gt;The next challenge in building empathy dialogue system is in the word “empathy”. Specifically:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How do we measure empathy?&lt;/li&gt;
  &lt;li&gt;How can we measure the success of a system on being more empathetic?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To materialise and measure empathy. We need to establish a &lt;strong&gt;baseline measurement&lt;/strong&gt;. One way to build such baseline is to have a dummy system have the same response regardless what the audience says, and we can count the lines of speech audience engage with the dummy system. For example, we can have dummy system to say:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s interesting! Please tell me more!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we count how many lines an audience engaged with the dummy system on average. After the dummy system is set up, then we can build alternative systems that aim to have more lines of engagement from the audience.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Computational linguistic is a fascinating yet complicated subject. I write this blog post to outline the big ideas behind &lt;a href=&quot;https://github.com/marshallshen/notebook&quot;&gt;a side project&lt;/a&gt;. Hope you find it interesting, don’t hesitate to &lt;a href=&quot;http://mshen.me/contact/&quot;&gt;contact me&lt;/a&gt; if you have any feedback!&lt;/p&gt;

&lt;p&gt;I will also write follow-up posts as more progress made on the project, stay tuned! :)&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 00:00:00 -0500</pubDate>
        <link>http://mshen.me/anatomy-of-empathy-dialogue-system/</link>
        <guid isPermaLink="true">http://mshen.me/anatomy-of-empathy-dialogue-system/</guid>
      </item>
    
  </channel>
</rss>
